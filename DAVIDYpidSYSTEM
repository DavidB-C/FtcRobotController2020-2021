/*
 * Copyright (c) 2021 OpenFTC Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.firstinspires.ftc.teamcode.drive;

import static java.lang.Math.floor;
import static java.lang.Math.random;

import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.trajectory.Trajectory;
import com.qualcomm.hardware.lynx.LynxModule;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.openftc.apriltag.AprilTagDetection;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvInternalCamera;

import java.util.ArrayList;

@Autonomous

public class three_cones_park extends LinearOpMode
{

    private DcMotor motorLinearSlides;



    private int motorLinearSlidesPos;


    public final static double CLAW_HOME = 0.3;
    public final static double CLAW_MIN_RANGE = 0;
    public final static double CLAW_MAX_RANGE = 0.3;


    OpenCvCamera camera;
    AprilTagDetectionPipeline aprilTagDetectionPipeline;

    static final double FEET_PER_METER = 3.28084;

    // Lens intrinsics
    // UNITS ARE PIXELS
    // NOTE: this calibration is for the C920 webcam at 800x448.
    // You will need to do your own calibration for other configurations!
    double fx = 578.272;
    double fy = 578.272;
    double cx = 402.145;
    double cy = 221.506;

    // UNITS ARE METERS
    double tagsize = 0.166;

    int ID_TAG_OF_INTEREST_LEFT = 1; // Tag ID 18 from the 36h11 family
    int ID_TAG_OF_INTEREST_MID = 2;
    int ID_TAG_OF_INTEREST_RIGHT = 3;

    AprilTagDetection tagOfInterest = null;

    @Override
    public void runOpMode()
    {
        for (LynxModule m : hardwareMap.getAll(LynxModule.class)) {
        m.setConstant( (int) floor(random() * 0xFFFFFF));
    }
        SampleMecanumDrive drive = new SampleMecanumDrive(hardwareMap);
        motorLinearSlides = hardwareMap.get(DcMotorEx.class, "motorLinearSlides");

        Servo claw = hardwareMap.servo.get("claw");
        claw.setDirection(Servo.Direction.FORWARD);
        motorLinearSlidesPos = 0;



        motorLinearSlidesPos = 0;
        // clawPos = 0;

        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        camera = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, "Webcam 1"), cameraMonitorViewId);
        aprilTagDetectionPipeline = new AprilTagDetectionPipeline(tagsize, fx, fy, cx, cy);

        camera.setPipeline(aprilTagDetectionPipeline);
        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()
        {
            @Override
            public void onOpened()
            {
                camera.startStreaming(800,448, OpenCvCameraRotation.UPRIGHT);
            }

            @Override
            public void onError(int errorCode)
            {

            }
        });

        telemetry.setMsTransmissionInterval(50);

        /*
         * The INIT-loop:
         * This REPLACES waitForStart!
         */
        while (!isStarted() && !isStopRequested())
        {
            ArrayList<AprilTagDetection> currentDetections = aprilTagDetectionPipeline.getLatestDetections();

            if(currentDetections.size() != 0)
            {
                boolean tagFound = false;

                for(AprilTagDetection tag : currentDetections)
                {
                    if(tag.id == ID_TAG_OF_INTEREST_LEFT || tag.id == ID_TAG_OF_INTEREST_MID || tag.id == ID_TAG_OF_INTEREST_RIGHT)
                    {
                        tagOfInterest = tag;
                        tagFound = true;
                        break;
                    }
                }

                if(tagFound)
                {
                    telemetry.addLine("Tag of interest is in sight!\n\nLocation data:");
                    tagToTelemetry(tagOfInterest);
                }
                else
                {
                    telemetry.addLine("Don't see tag of interest :(");

                    if(tagOfInterest == null)
                    {
                        telemetry.addLine("(The tag has never been seen)");
                    }
                    else
                    {
                        telemetry.addLine("\nBut we HAVE seen the tag before; last seen at:");
                        tagToTelemetry(tagOfInterest);
                    }
                }

            }
            else
            {
                telemetry.addLine("Don't see tag of interest :(");

                if(tagOfInterest == null)
                {
                    telemetry.addLine("(The tag has never been seen)");
                }
                else
                {
                    telemetry.addLine("\nBut we HAVE seen the tag before; last seen at:");
                    tagToTelemetry(tagOfInterest);
                }

            }

            telemetry.update();
            sleep(20);
        }

        /*
         * The START command just came in: now work off the latest snapshot acquired
         * during the init loop.
         */

        /* Update the telemetry */
        if(tagOfInterest != null)
        {
            telemetry.addLine("Tag snapshot:\n");
            tagToTelemetry(tagOfInterest);
            telemetry.update();
        }
        else
        {
            telemetry.addLine("No tag snapshot available, it was never sighted during the init loop :(");
            telemetry.update();
        }


        Trajectory traj = drive.trajectoryBuilder(new Pose2d(0,0))
                .lineToLinearHeading(new Pose2d((-25.57*2), 0, Math.toRadians(-53.5)))
                .build();


        Trajectory traj2 = drive.trajectoryBuilder(traj.end())
                .forward(7)
                .build();


        Trajectory traj4 = drive.trajectoryBuilder(traj2.end())
                .lineToLinearHeading(new Pose2d((-55), 0, Math.toRadians(91)))
                .build();


        Trajectory traj5 = drive.trajectoryBuilder(traj4.end())
                .lineToLinearHeading(new Pose2d(-55, 23, Math.toRadians(91)))
                .build();



        Trajectory traj6 = drive.trajectoryBuilder(traj5.end())
                .lineToLinearHeading(new Pose2d(-62, 0, Math.toRadians(-54.7)))
                .build();

        Trajectory traj7 = drive.trajectoryBuilder(traj6.end())
                .forward(10.5)
                .build();

        Trajectory traj7_5 = drive.trajectoryBuilder(traj7.end())
                .lineToLinearHeading(new Pose2d(-64, 0, Math.toRadians(89)))
                .build();


        Trajectory traj9 = drive.trajectoryBuilder(traj7_5.end())
                .lineToLinearHeading(new Pose2d(-64, 20, Math.toRadians(89)))
                .build();




        Trajectory traj10 = drive.trajectoryBuilder(traj9.end())
                .lineToLinearHeading(new Pose2d(-60, -8, Math.toRadians(-126)))
                .build();

        Trajectory traj11 = drive.trajectoryBuilder(traj10.end())
                .forward(5.7)
                .build();

        Trajectory traj12 = drive.trajectoryBuilder(traj11.end())
                .lineToLinearHeading(new Pose2d(-60, -8, Math.toRadians(91)))
                .build();

        Trajectory trajPARK1 = drive.trajectoryBuilder(traj12.end())
                .lineToLinearHeading(new Pose2d(-60, -30, Math.toRadians(91)))
                .build();


        Trajectory trajPARK3 = drive.trajectoryBuilder(traj12.end())
                .lineToLinearHeading(new Pose2d(-60, 20, Math.toRadians(91)))
                .build();


        motorLinearSlides.setPower(.5);
        claw.setPosition(.85);
        sleep(300);
        slides(-2800);
        drive.followTrajectory(traj);
        sleep(500);
        drive.followTrajectory(traj2);
        sleep(100);
        claw.setPosition(.5);
        sleep(300);
        drive.followTrajectory(traj4);
        slides(2400);
        sleep(1500);
        drive.followTrajectory(traj5);
        sleep(200);
        //drive.followTrajectory(traj5_5);
        claw.setPosition(.85);
        sleep(300);
        slides(-700);
        sleep(1500);
        drive.followTrajectory(traj6);
        slides(-1550);
        sleep(500);
        drive.followTrajectory(traj7);
        sleep(100);
        claw.setPosition(.5);
        sleep(500);
        //   slides(-3400,1);
        drive.followTrajectory(traj7_5);

        sleep(200);
        slides(2400);

        sleep(1500);
        //    slides(3500,1);
        drive.followTrajectory(traj9);
        sleep(100);

        //     drive.followTrajectory(traj9_5);
        claw.setPosition(.85);
        sleep(100);
        slides(-700);
        sleep(1000);
        slides(-3100);
        drive.followTrajectory(traj10);

        sleep(500);
        drive.followTrajectory(traj11);
        sleep(500);
        claw.setPosition(.5);
        sleep(500);
        drive.followTrajectory(traj12);
        motorLinearSlides.setPower(1);
        slides(3800);

        if(tagOfInterest == null || tagOfInterest.id == ID_TAG_OF_INTEREST_RIGHT) {
            sleep(200);
            drive.followTrajectory(trajPARK3);

        }else if(tagOfInterest.id == ID_TAG_OF_INTEREST_MID){

        idle();

        }else if(tagOfInterest.id == ID_TAG_OF_INTEREST_LEFT){

            sleep(200);
            motorLinearSlides.setPower(.5);
            slides(-700);
            drive.followTrajectory(trajPARK1);

        }

        telemetry.addData("Path", "Complete");
        telemetry.update();
        sleep(1000);
    }

    private void slides(int motorLinearSlidesTarget) {

        motorLinearSlidesPos += motorLinearSlidesTarget;


        motorLinearSlides.setTargetPosition(motorLinearSlidesPos);

        motorLinearSlides.setMode(DcMotor.RunMode.RUN_TO_POSITION);




    }

    void tagToTelemetry(AprilTagDetection detection)
    {

        telemetry.addLine(String.format("\nDetected tag ID=%d", detection.id));
        telemetry.addLine(String.format("Translation X: %.2f feet", detection.pose.x*FEET_PER_METER));
        telemetry.addLine(String.format("Translation Y: %.2f feet", detection.pose.y*FEET_PER_METER));
        telemetry.addLine(String.format("Translation Z: %.2f feet", detection.pose.z*FEET_PER_METER));
        telemetry.addLine(String.format("Rotation Yaw: %.2f degrees", Math.toDegrees(detection.pose.yaw)));
        telemetry.addLine(String.format("Rotation Pitch: %.2f degrees", Math.toDegrees(detection.pose.pitch)));
        telemetry.addLine(String.format("Rotation Roll: %.2f degrees", Math.toDegrees(detection.pose.roll)));
    }
}
